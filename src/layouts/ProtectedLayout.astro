---
import "@/styles/global.css";

export interface SEOFields {
	robots: string[];
    title: string;
    description: string;
    keywords: string[];
    url: string;
    imageOG: string;
	imagetwt: string;
}

const { 
	robots = [],
	title = "", 
	description = "", 
	keywords = [], 
	url="",
	imageOG = "",
    imagetwt = ""
} = Astro.props;
---
<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="viewport-fit=cover, width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
		/>
		<meta name="robots" content={robots.join(", ")} />
		<meta http-equiv="Content-Language" content="es" />
		<meta name="author" content="incadev" />
		<meta name="copyright" content="Â© 2025 incadev" />

		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords.join(", ")} />
		<meta name="theme-color" content="#FFFFFF" />

		<link rel="canonical" href={url} />
		<link rel="icon" type="image/x-icon" href="favicon.ico" />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={imageOG} />
		<meta property="og:type" content="website" />
		<meta property="og:locale" content="es_ES" />
		<meta property="og:url" content={url} />

		<!-- Twitter -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={imagetwt} />
		<meta name="twitter:site" content="@incadev" />
		<meta name="twitter:creator" content="@incadev" />

	</head>
	<body class="min-h-screen flex flex-col">
		<main class="flex-grow">
			<slot />
		</main>
	</body>
</html>

<style>
	html,
	body {
		padding: 0px;
		margin: 0px;
		width: 100%;
		height: 100%;
	}
</style>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>